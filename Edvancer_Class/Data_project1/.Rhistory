library(dplyr)
library(dplyr)
glimpse(ld_all)
install.packages(c("car", "dplyr", "magrittr", "tidyr"))
library(dplyr)
glimpse(ld_all)
#setwd("/media/dell/D_PROJECTS/Edvancer_Class/DataScienceWithR/Data/Data")
setwd("/media/dell/D_PROJECTS/Edvancer_Class/EDV_Projects/Data_project1")
house_train=read.csv("housing_train.csv",stringsAsFactors = F)
house_test= read.csv("housing_test.csv",stringsAsFactors = F)
View(house_train)
# QA in Edvancer
# var(house_train$Price)
# tapply(house_train$Price,house_train$Type,mean,na.rm=T)
# unique(house_train$Postcode)
# max1=tapply(house_train$Price,house_train$CouncilArea,var,na.rm=T)
# max(max1)
#Ans - Stonnington (994218615783)
house_test$Price=NA
house_train$data='train'
house_test$data='test'
house_all=rbind(house_train,house_test)
CreateDummies=function(data,var,freq_cuttoff=0)
{
t=table(data[,var])
t=t[t>freq_cuttoff] #  t =t>freq_cuttoff
t=sort(t)
categories=names(t)[-1]
for(cat in categories) {
name=paste(var,cat,sep="_")
data[,name]=as.numeric(data[,var]==cat)
}
data[,var]=NULL
return(data)
}
glimpse(house_all)
### NA
# count NA
lapply(house_all,function(x) sum(is.na(x)))
# Remoe NA from Data
#house_all=house_all[!(is.na(house_all$Bed)),]
for(col in names(house_all)){
if(sum(is.na(house_all[,col]))>0 & !(col %in% c("data","Price"))){
house_all[is.na(house_all[,col]),col]=mean(house_all[,col],na.rm=T)
}
}
sort(table(house_all$Bedroom2))
sort(table(house_all$SellerG))
house_all=CreateDummies(house_all,"Bedroom2",400)
table(house_all$Bedroom2)
house_all=CreateDummies(house_all,"SellerG",100)
table(house_all$SellerG)
house_all=CreateDummies(house_all,"Type",1000)
table(house_all$Type)
library(dplyr)
glimpse(house_all)
sort(table(house_all$Distance))
house_all=CreateDummies(house_all,"Distance",100)
sort(table(house_all$CouncilArea))
council=sort(tapply(house_train$Price,house_train$CouncilArea,mean,na.rm=T))
council
#setwd("/media/dell/D_PROJECTS/Edvancer_Class/DataScienceWithR/Data/Data")
setwd("/media/dell/D_PROJECTS/Edvancer_Class/EDV_Projects/Data_project1")
house_train=read.csv("housing_train.csv",stringsAsFactors = F)
house_test= read.csv("housing_test.csv",stringsAsFactors = F)
View(house_train)
# QA in Edvancer
# var(house_train$Price)
# tapply(house_train$Price,house_train$Type,mean,na.rm=T)
# unique(house_train$Postcode)
# max1=tapply(house_train$Price,house_train$CouncilArea,var,na.rm=T)
# max(max1)
#Ans - Stonnington (994218615783)
house_test$Price=NA
house_train$data='train'
house_test$data='test'
house_all=rbind(house_train,house_test)
CreateDummies=function(data,var,freq_cuttoff=0)
{
t=table(data[,var])
t=t[t>freq_cuttoff] #  t =t>freq_cuttoff
t=sort(t)
categories=names(t)[-1]
for(cat in categories) {
name=paste(var,cat,sep="_")
data[,name]=as.numeric(data[,var]==cat)
}
data[,var]=NULL
return(data)
}
glimpse(house_all)
### NA
# count NA
lapply(house_all,function(x) sum(is.na(x)))
# Remoe NA from Data
#house_all=house_all[!(is.na(house_all$Bed)),]
for(col in names(house_all)){
if(sum(is.na(house_all[,col]))>0 & !(col %in% c("data","Price"))){
house_all[is.na(house_all[,col]),col]=mean(house_all[,col],na.rm=T)
}
}
sort(table(house_all$Bedroom2))
sort(table(house_all$SellerG))
house_all=CreateDummies(house_all,"Bedroom2",400)
table(house_all$Bedroom2)
house_all=CreateDummies(house_all,"SellerG",100)
table(house_all$SellerG)
house_all=CreateDummies(house_all,"Type",1000)
table(house_all$Type)
library(dplyr)
glimpse(house_all)
sort(table(house_all$Distance))
house_all=CreateDummies(house_all,"Distance",100)
sort(table(house_all$CouncilArea))
#setwd("/media/dell/D_PROJECTS/Edvancer_Class/DataScienceWithR/Data/Data")
setwd("/media/dell/D_PROJECTS/Edvancer_Class/Data_project1")
house_train=read.csv("housing_train.csv",stringsAsFactors = F)
house_test= read.csv("housing_test.csv",stringsAsFactors = F)
house_train=read.csv("housing_train.csv",stringsAsFactors = F)
house_test= read.csv("housing_test.csv",stringsAsFactors = F)
setwd("/media/dell/D_PROJECTS/Edvancer_Class/Data_project1")
setwd("/media/dell/D_PROJECTS/Edvancer_Class/Data_project1")
house_train=read.csv("housing_train.csv",stringsAsFactors = F)
house_test= read.csv("housing_test.csv",stringsAsFactors = F)
house_test$Price=NA
house_train$data='train'
house_test$data='test'
house_all=rbind(house_train,house_test)
CreateDummies=function(data,var,freq_cutoff=0)
{
t=table(data[,var])
t=t[t>freq_cutoff]
t=sort(t)
categorise=names(t)[-1]
for (cat in categorise) {
name=paste(var,cat,sep="-")
name=gsub(" ","",name)
name=gsub("-","_",name)
name=gsub("\\?","Q",name)
name=gsub("<","LT_",name)
name=gsub("\\+","",name)
data[,name]=as.numeric(data[,var]==cat)
}
data[,var]=NULL
return(data)
}
lapply(house_all,function(x) sum(is.na(x)))
for(col in names(house_all)){
if(sum(is.na(house_all[,col]))>0 & !(col %in% c("data","Price"))){
house_all[is.na(house_all[,col]),col]=mean(house_all[,col],na.rm=T)
}
}
house_all=CreateDummies(house_all,"Rooms",500)
house_all=CreateDummies(house_all,"Type",1000)
house_all=house_all %>%
mutate(ca_1=as.numeric(CouncilArea %in% c("Bayside","Boroondara","Stonnington","Whitehorse")),
ca_2=as.numeric(CouncilArea %in% c("Manningham","Yarra")),
ca_3=as.numeric(CouncilArea %in% c("Port Phillip","Monash","Glen Eira",""))) %>%
select(-CouncilArea)
library(dplyr)
house_all=house_all %>%
mutate(ca_1=as.numeric(CouncilArea %in% c("Bayside","Boroondara","Stonnington","Whitehorse")),
ca_2=as.numeric(CouncilArea %in% c("Manningham","Yarra")),
ca_3=as.numeric(CouncilArea %in% c("Port Phillip","Monash","Glen Eira",""))) %>%
select(-CouncilArea)
round(tapply(house_all$Price,house_all$Suburb,mean,na.rm=T))
house_all= house_all %>%
mutate(Suburb_1= as.numeric(Suburb %in% c( "Albert Park","Malvern","Balwyn","Balwyn North",
"Brighton","Camberwell","Ivanhoe East","Kew",
"Middle Park","Toorak")),
Suburb_2=as.numeric(Suburb %in% c("Eaglemont","Glen Iris","Hampton","Kew East",
"Mont Albert","Princes Hill"))) %>%
select(-Suburb)
house_train=house_all %>% filter(data=='train') %>% select(-data)
house_test=house_all %>% filter(data=='test') %>% select(-data,-Price)
View(house_train)
library(caTools)
s= sample.split(house_train,SplitRatio = 0.7)
train1=house_train[s,]
train2=house_train[-s,]
fit=lm(Price~.-Method-Landsize-Distance
-Postcode-Address-Distance-Car-BuildingArea,
data = train1)
#402500
summary(fit)
step(fit)
sort(vif(fit),decreasing =T )
library(car)
sort(vif(fit),decreasing =T )
###############################################
final_fit=fit=lm(Price~.-Method-Landsize-Distance
-Postcode-Address-Car-BuildingArea,data = house_train)
final_fit=step(final_fit)
summary(final_fit)
test.pred1=predict(final_fit,newdata = train2)
